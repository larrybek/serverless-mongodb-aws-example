service: core

plugins:
  - serverless-offline
  - serverless-bundle
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  dotenv:
    path: ../../.env

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ${env:REGION}

  environment:
    STAGE: ${self:provider.stage, dev}
    REGION: ${self:provider.region}
    MONGODB_URL: ${env:MONGODB_URL}
    S3_BUCKET: ${env:S3_BUCKET}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "*"

functions:
  FetchDatabase:
    handler: controllers/index.handler
    timeout: 300
    events:
      - http:
          path: /
          method: post
          cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
